// IMPORTS
// ================================================================================================
import { compile, instantiate, analyze } from '../index';

// SOURCE CODE
// ================================================================================================
const source = `
(module
    (field prime 340282366920938463463374607393113505793)
    (const
        (scalar 5)
        (matrix
            (214709430312099715322788202694750992687  54066244720673262921467176400601950806 122144641489288436529811410313120680228)
            ( 83122512782280758906222839313578703456 163244785834732434882219275190570945140  65865044136286518938950810559808473518)
            ( 12333142678723890553278650076570367543 308304933036173868454178201249080175007  76915505462549994902479959396659996669)))
    (static
        (input secret vector (steps 64) (shift -1))
        (input secret vector (steps 64) (shift -1))
        (mask inverted (input 0))
        (cycle 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0)
        (cycle 101067374344786229690165777417886956455 322051539143308178784018947861271504186 80879405459437789936954974293890354143 166621021498946425309990886178572593836 114878919795826823010086281806730250259 267561759937249094744289925169260312494 194110511991219241361342117844828731162 107986555924182681758004321386075124502 63224828526840246674964990591112663251 167399370105366126705585143377761292833 123917900634392911495720210586293949218 248992341480614790028293769864567645303 8960463868841581394177745196362538931 8101488426690001440408100245673215218 304426686261792199045208628824939744396 48993774262478364717773155802266608884 139248743493693543574362336690677204150 291279889149987731543504742574693814990 42367710866720064202792549663448540785 86060040593225944795613201189716366383 189863704006068142459895777540825088442 197583782112658785734683085263893120316 161611757311618464562770663978820673729 196931671468680290178573409026215179058 107848945192029541854456283059391168779 173655304690229187926998680457570363125 205945359570699257407471217213049015727 147825099656638281024623693396710147040 58577998438842451878897959204616513430 161917161421570397607687931718629148072 147016861164463692587954908003837148977 215327558933510716152631939565165418773 221305982492077693024204261831250983058 323585049507086115168593556573867551841 311509369929180010769727537078411864880 156774305225210999040365434156661973875 78521800629371857648628339237793008452 303410954489016154925319771056410784790 161238666861025167140079865050950554358 281058165548587689299846367255233412598 17446468832473249589930485157217490331 117782486411702406456147958118627810962 311481998551130544644599040004090150785 279716539010539271215865135391244112598 92147549714193116335857391734397177185 280710885259895104937796435358384290228 217539743203532143846692767321358427415 136655932048224681500323820246811483935 86030224562160068798100512640813844653 72691901656253597923198296013451195433 232951077157639676743371380280177008902 249312899481814928733954764459695627065 175913709415803705716619900357949824830 88000320801772984864038892128909494901 261249899652764326342527749765363483270 256980419007077580503302920676982513097 136895236721731160237863955081156335501 278835700297515366086396437808921707517 25729267372108976141142465766251917280 267323764062650153023605282298500286542 256061784799257069172948152248370917668 83025869683936384628904993855895748660 330241617869611525277492863466863906645 142024361460738638773024784097801099645)
        (cycle 146765449460473874529902349042422029282 13573466009239340031362932395458186440 98885934149842051859154927621653227231 205979145374097025879144929541132699058 181855717760526754006191770137229284832 65293524936181066378852614699982653792 228247769650141808714014297889797680647 158320431039819013724056153361250437299 13578873195485401654248572666846172242 7080580844672508110591543268327372330 70760289434084172441897759483957239610 37966229549161867448320821572059478826 188760295256568875961511459777252273397 198229630880481881035294219349336090081 184032888031378822742104532169963736593 288398122419202843810193941214959791201 252311626103440610452435740719082430192 195998459800806913137866489475817358908 88660088865945662432425199133055719166 294270665828543587053186257696298010838 40656828413615935820919738981226995022 171304287775986339875130964966258637028 47605556286951219882396631419748027969 190788745517781011708299328686422201963 216818899956135536043740480638560153986 55845248645914669770041466941573058650 213949618424850854090190213667468025888 63182438708244983635607000093651816239 293295466157092545901161709078345148800 332165454105302266870168482340776221295 283736605655444841548057116715795094909 43557372990102883437835836847469664166 141804875477763201884632744817477142856 8316499313216746360573398340532093282 154132846112644213162877577305001225511 141742639916673009847590303472654389647 302370437180100286259669260226931255415 251012012686788495091249610427026420806 235065884863985635853908886392838728028 55599039443712394674938093918412528042 37998809572015702533317462086404402958 89645159866260880302089479920657850346 7643451611338337340435241281556526660 318801627723634633320424781856311097412 90373027270972543200849272540156681200 146735124489630731633339883024098856957 162492611704225977679807475255297391457 113455031404175343881295905992426513340 187698148037256142832585028103191274512 155705458352793817275982716402764587668 218355169036883684354948971773610834806 324926020570376787111091593861555511152 284252182207710226928526862613708677058 168302547773443965770323533167888055386 113548005864628114124430901471053370216 169155478632517926997536461853615508336 46415050994359662698544085246970016745 134025807821560463161388080754233795157 251455601063515157264374248471890566906 283823359027202385047408516959737916101 297300229883234520698321917468060733020 283181848011071358889371180294740301777 217394300372290045057684361830229716930 305547359509546561742787034377392910472)
        (cycle 188918174955023395574394659362380216945 217649182917826081035481873751122644291 275443395862792216728627702308701886138 152659039879460956859694768201267262463 176914867893722931358620076111891805615 137429565044406538681943564087558135845 177610982494044061776647121226227975409 202165172985221136229062188263893600461 291916955530912322309733271565564511332 248696722457267566212498387820864867877 289466531682335742105153049709808805978 150943748555894073220377716092322651874 194589253754193407998905368760571739262 201979794187496251505649688393833078032 136152832913116532980571643773440984648 275154958006426248908039217032764719630 230316251190186772094018169418063670618 127194797080986880004102995466029371133 35888942284942224553531390726640183499 2209197978733044107261235981369767183 179855520578612030164778843931303242659 194640849478394046077871184940261405523 297000831966727251238564718044302174621 162954170031470749516430651526575452664 340230749785602664559546975551889050580 165358612228327484289881360331318185588 65679664426547362493119348244825148715 203711423143707083166070958655025869710 338007441305937213330164891051600062676 237519337087790246298834395607985331028 186506691377216141093732006776809535340 34059114160159201903882098232062435492 266083496202897572599786752224989813161 127455802439376130126678665947075383730 196169391760449960749680739550989998676 287291927543030668420336828037391880039 107327529195524785922076970134413617817 282585837639092028722180009291150499375 241658307432605782658590435256729833348 230844324778754129279786787870517415398 182481232544779909483010208823509553132 279820312581995046028660546259530937922 163285088220216032474266013394365809175 245225006985133879871729977409233103774 47981236253638513408972379544463089685 73487483003009296222650829340075137226 166920499885118430646444773696799783127 240224956822876274753449371064884172823 219245357136371580140802547968716048263 96647877590709694191702588228166778700 231793417223306239786383013527788012076 215010113263800903779159821764601955732 170422859909281586225441950177639557783 318679004030021278318014607085137921688 261519178593116333071877689025474749162 165941769797065377768197016687666663400 114230967201961470945431392272142729341 298345005564579884786581323629122246614 230076387858459704843613099073958133212 260070759149685321338950853753960310563 67759771743183883930598537075463268782 4073159995217021243345828151441104537 241908616864155373359491296588583682861 281435152380630123136371016826322565886))
    (transition
        (span 1) (result vector 3)
        (local vector 3) (local vector 3)
        (store.local 0 
            (prod
                (load.const 1)
                (exp
                    (add (load.trace 0) (slice (load.static 0) 4 6))
                    (load.const 0))))
        (store.local 1
            (prod
                (load.const 1)
                (vector
                    (add (slice (load.trace 0) 0 1) (slice (load.static 0) 4 5))
                    (exp
                        (add (get (load.trace 0) 2) (get (load.static 0) 6))
                        (load.const 0)))))
        (add
            (vector (slice (load.static 0) 0 1) (scalar 0))
            (mul 
                (add
                    (mul (load.local 0) (get (load.static 0) 3))
                    (mul (load.local 1) (sub (scalar 1)  (get (load.static 0) 3))))
                (get (load.static 0) 2)))
    )
    (evaluation
        (span 2) (result vector 3)
		(local vector 3) (local vector 3)
        (store.local 0 
            (prod
                (load.const 1)
                (exp
                    (add (load.trace 0) (slice (load.static 0) 4 6))
                    (load.const 0))))
        (store.local 1
            (prod
                (load.const 1)
                (vector
                    (add (slice (load.trace 0) 0 1) (slice (load.static 0) 4 5))
                    (exp
                        (add (get (load.trace 0) 2) (get (load.static 0) 6))
                        (load.const 0)))))
        (sub
            (load.trace 1)
            (add
                (vector (slice (load.static 0) 0 1) (scalar 0))
                (mul 
                    (add
                        (mul (load.local 0) (get (load.static 0) 3))
                        (mul (load.local 1) (sub (scalar 1)  (get (load.static 0) 3))))
                    (get (load.static 0) 2)))
		)
	)
    (export main (init seed) (steps 64)))
`;

// EXAMPLE CODE
// ================================================================================================
const inputs = [
    [42n],
    [43n]
];

// instantiate AirModule object
const schema = compile(Buffer.from(source));
const stats = analyze(schema);
const air = instantiate(schema);

// generate trace table
const pObject = air.initProof(inputs);
const trace = pObject.generateExecutionTrace([inputs[0][0], inputs[1][0], 0n]);

// generate constraint evaluation table
const pPolys = air.field.interpolateRoots(pObject.executionDomain, trace);
const cEvaluations = pObject.evaluateTransitionConstraints(pPolys);

console.log('done!');